angular.module("RadCalc.controllers",[]),angular.module("RadCalc.services",[]),angular.module("RadCalc.directives",[]);var app=angular.module("RadCalc",["RadCalc.services","RadCalc.controllers"]);angular.module("RadCalc.controllers").controller("CTFormCtrl",function($scope,getDataService,edeCalculationService){function edeTotal(includeSOC){var decimalPlaceCount=0,total=0;return includeSOC===!0?angular.forEach($scope.form.exams,function(item){decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede}):angular.forEach($scope.form.exams,function(item){item.soc||(decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede)}),Math.round10(total,decimalPlaceCount)}function defaultTomographyExam(){return uniqueProcedureId++,{id:uniqueProcedureId,exam:"",scans:0,soc:!1,gender:"mixed",ede:0}}var uniqueProcedureId=0;$scope.form={id:"CT",name:"X-ray Computed Tomography Examinations",headers:["Study","Examination","# Scans","Standard of Care?","Gender Predominance","EDE(mSv)"],exams:[defaultTomographyExam()]},$scope.allProcedures=function(categoryId){return getDataService.getAllProcedures(categoryId)},$scope.createRow=function(){$scope.form.exams.push(defaultTomographyExam())},$scope.submit=function(){console.log($scope.form.exams)},$scope.socLabel=function(value){return value?"Yes":"No"},$scope.calculateEDE=function(exam){if(""===exam.exam||void 0===exam.exam)return 0;var singleScanEDE=getDataService.getProcedurePropertyValue($scope.form.id,exam.exam,exam.gender),unadjustedEDE=edeCalculationService.simpleEdeCalculation(singleScanEDE,exam.scans),decimalPlaces=edeCalculationService.countDecimalPlaces(singleScanEDE),adjustedEDE=Math.round10(unadjustedEDE,-decimalPlaces);return exam.ede=parseFloat(adjustedEDE),exam.ede},$scope.removeProcedure=function(procedureId){var i,procedure;for(console.log(procedureId),i=0;i<$scope.form.exams.length;i++)if(procedure=$scope.form.exams[i],procedureId===procedure.id)return void $scope.form.exams.splice(i,1)},$scope.edeTotal=function(){return edeTotal(!0)},$scope.edeTotalWithoutSOC=function(){return edeTotal(!1)}}),angular.module("RadCalc.controllers").controller("CommonFormCtrl",function($scope){$scope.testVariable="This is my test variable!"}),angular.module("RadCalc.controllers").controller("FlouroscopyFormCtrl",function($scope,getDataService,edeCalculationService){function edeTotal(includeSOC){var decimalPlaceCount=0,total=0;return includeSOC===!0?angular.forEach($scope.form.exams,function(item){decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede}):angular.forEach($scope.form.exams,function(item){item.soc||(decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede)}),Math.round10(total,decimalPlaceCount)}function defaultTomographyExam(){return uniqueProcedureId++,{id:uniqueProcedureId,exam:"",scans:0,soc:!1,gender:"mixed",minutes:0,ede:0}}var uniqueProcedureId=0;$scope.form={id:"Flouro",name:"Flouroscopy Examinations",headers:["Study","Examination","# Scans","Standard of Care?","Gender Predominance","Minutes","EDE(mSv)"],exams:[defaultTomographyExam()]},$scope.allProcedures=function(categoryId){return getDataService.getAllProcedures(categoryId)},$scope.createRow=function(){$scope.form.exams.push(defaultTomographyExam())},$scope.submit=function(){console.log($scope.form.exams)},$scope.socLabel=function(value){return value?"Yes":"No"},$scope.calculateEDE=function(exam){if(""===exam.exam||void 0===exam.exam)return 0;var singleScanEDE=getDataService.getProcedurePropertyValue($scope.form.id,exam.exam,exam.gender),unadjustedEDE=edeCalculationService.simpleEdeCalculation(singleScanEDE,exam.scans);unadjustedEDE*=exam.minutes;var decimalPlaces=edeCalculationService.countDecimalPlaces(singleScanEDE),adjustedEDE=Math.round10(unadjustedEDE,-decimalPlaces);return exam.ede=parseFloat(adjustedEDE),exam.ede},$scope.removeProcedure=function(procedureId){var i,procedure;for(console.log(procedureId),i=0;i<$scope.form.exams.length;i++)if(procedure=$scope.form.exams[i],procedureId===procedure.id)return void $scope.form.exams.splice(i,1)},$scope.edeTotal=function(){return edeTotal(!0)},$scope.edeTotalWithoutSOC=function(){return edeTotal(!1)}}),angular.module("RadCalc.controllers").controller("NMFormCtrl",function($scope,getDataService,edeCalculationService){function edeTotal(includeSOC){var decimalPlaceCount=0,total=0;return includeSOC===!0?angular.forEach($scope.form.exams,function(item){decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede}):angular.forEach($scope.form.exams,function(item){item.soc||(decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede)}),Math.round10(total,decimalPlaceCount)}function defaultTomographyExam(){return uniqueProcedureId++,{id:uniqueProcedureId,exam:"",scans:0,soc:!1,gender:"mixed",injectedDose:0,ede:0}}var uniqueProcedureId=0;$scope.form={id:"NM",name:"Nuclear Medicine Examinations",headers:["Study","Examination","# Scans","Standard of Care?","Gender Predominance","InjectedDose (mCi)","EDE(mSv)"],exams:[defaultTomographyExam()]},$scope.allProcedures=function(categoryId){return getDataService.getAllProcedures(categoryId)},$scope.createRow=function(){$scope.form.exams.push(defaultTomographyExam())},$scope.submit=function(){console.log($scope.form.exams)},$scope.socLabel=function(value){return value?"Yes":"No"},$scope.calculateEDE=function(exam){if(""===exam.exam||void 0===exam.exam)return 0;var singleScanEDE=getDataService.getProcedurePropertyValue($scope.form.id,exam.exam,exam.gender),unadjustedEDE=edeCalculationService.simpleEdeCalculation(singleScanEDE,exam.scans);unadjustedEDE*=exam.injectedDose;var decimalPlaces=edeCalculationService.countDecimalPlaces(singleScanEDE),adjustedEDE=Math.round10(unadjustedEDE,-decimalPlaces);return exam.ede=parseFloat(adjustedEDE),exam.ede},$scope.removeProcedure=function(procedureId){var i,procedure;for(console.log(procedureId),i=0;i<$scope.form.exams.length;i++)if(procedure=$scope.form.exams[i],procedureId===procedure.id)return void $scope.form.exams.splice(i,1)},$scope.edeTotal=function(){return edeTotal(!0)},$scope.edeTotalWithoutSOC=function(){return edeTotal(!1)}}),angular.module("RadCalc.controllers").controller("XRayFormCtrl",function($scope,getDataService,edeCalculationService){function edeTotal(includeSOC){var decimalPlaceCount=0,total=0;return includeSOC===!0?angular.forEach($scope.form.exams,function(item){decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede}):angular.forEach($scope.form.exams,function(item){item.soc||(decimalPlaceCount=-edeCalculationService.maxDecimalPlaces(total,item.ede),total+=item.ede)}),Math.round10(total,decimalPlaceCount)}function defaultTomographyExam(){return uniqueProcedureId++,{id:uniqueProcedureId,exam:"",scans:0,soc:!1,gender:"mixed",ede:0}}var uniqueProcedureId=0;$scope.form={id:"XRay",name:"X-ray Examinations",headers:["Study","Examination","# Scans","Standard of Care?","Gender Predominance","EDE(mSv)"],exams:[defaultTomographyExam()]},$scope.allProcedures=function(categoryId){return getDataService.getAllProcedures(categoryId)},$scope.createRow=function(){$scope.form.exams.push(defaultTomographyExam())},$scope.submit=function(){console.log($scope.form.exams)},$scope.socLabel=function(value){return value?"Yes":"No"},$scope.calculateEDE=function(exam){if(""===exam.exam||void 0===exam.exam)return 0;var singleScanEDE=getDataService.getProcedurePropertyValue($scope.form.id,exam.exam,exam.gender),unadjustedEDE=edeCalculationService.simpleEdeCalculation(singleScanEDE,exam.scans),decimalPlaces=edeCalculationService.countDecimalPlaces(singleScanEDE),adjustedEDE=Math.round10(unadjustedEDE,-decimalPlaces);return exam.ede=parseFloat(adjustedEDE),exam.ede},$scope.removeProcedure=function(procedureId){var i,procedure;for(console.log(procedureId),i=0;i<$scope.form.exams.length;i++)if(procedure=$scope.form.exams[i],procedureId===procedure.id)return void $scope.form.exams.splice(i,1)},$scope.edeTotal=function(){return edeTotal(!0)},$scope.edeTotalWithoutSOC=function(){return edeTotal(!1)}}),angular.module("RadCalc.services").factory("edeCalculationService",function(){return{simpleEdeCalculation:function(singleEde,scanCount){return singleEde*scanCount},countDecimalPlaces:function(value){var valueString=""+value,ary=valueString.split(".");return ary.length<2?0:ary[1].length},maxDecimalPlaces:function(n1,n2){var n1Count=this.countDecimalPlaces(n1),n2Count=this.countDecimalPlaces(n2);return n1Count>n2Count?n1Count:n2Count}}}),angular.module("RadCalc.services").factory("getDataService",function($q,$http){var getData,data={};return getData=function(){var deferred=$q.defer(),httpPromise=$http.get("/js/data.json");return httpPromise.then(function(response){deferred.resolve(response)},function(error){console.error(error)}),deferred.promise},getData().then(function(response){data=response.data},function(error){console.error(error)}),{data:getData,getAllProcedures:function(categoryID){for(var categoryIndex in data.DoseData){var category=data.DoseData[categoryIndex];if(category.name==categoryID)return category.exams}},getProcedure:function(categoryID,procedureName){var allProcedures=this.getAllProcedures(categoryID);for(var procedureIndex in allProcedures){var procedure=allProcedures[procedureIndex];if(procedure.name==procedureName)return procedure}},getAllProcedureProperties:function(categoryID,procedureName){var procedure=this.getProcedure(categoryID,procedureName);return procedure.properties},getProcedurePropertyValue:function(categoryID,procedureName,genderPredominance){var properties=this.getAllProcedureProperties(categoryID,procedureName);for(var propertyIndex in properties){var property=properties[propertyIndex];if(property.gender==genderPredominance)return property.value}}}}),function(){function decimalAdjust(type,value,exp){return"undefined"==typeof exp||0===+exp?Math[type](value):(value=+value,exp=+exp,isNaN(value)||"number"!=typeof exp||exp%1!==0?0/0:(value=value.toString().split("e"),value=Math[type](+(value[0]+"e"+(value[1]?+value[1]-exp:-exp))),value=value.toString().split("e"),+(value[0]+"e"+(value[1]?+value[1]+exp:exp))))}Math.round10||(Math.round10=function(value,exp){return decimalAdjust("round",value,exp)}),Math.floor10||(Math.floor10=function(value,exp){return decimalAdjust("floor",value,exp)}),Math.ceil10||(Math.ceil10=function(value,exp){return decimalAdjust("ceil",value,exp)})}();